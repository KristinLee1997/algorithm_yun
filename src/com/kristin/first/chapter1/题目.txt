*1.折纸问题:  PaperFoldingProblem.java
 1.1请把纸条竖着放在桌⼦上，然后从纸条的下边向上⽅对折，压出折痕后再展开。此时有1条折痕，突起的⽅向指向纸条的背⾯，
    这条折痕叫做“下”折痕 ；突起的⽅向指向纸条正⾯的折痕叫做“上”折痕。如果每次都从下边向上⽅ 对折，对折N次。请从
    上到下打印所有折痕的⽅向。
思路:会发现遍历结果是一颗完全二叉树的中序遍历,并且根节点为down,其余结点,奇数位为down,偶数位为up,
     而折叠n次就代表二叉树有n层,结点个数为2^n-1.
 1.2如何实现转圈打印矩阵？  PrintMatrixCircle.java
思路: 可以定义一个函数,输入参数为四个值,即左上,右下顶点坐标,打印这一圈的元素
      然后左上,右下顶点分别沿着对称线向中心点靠拢,就这样一圈一圈的打印元素
 1.3如何实现顺时针旋转矩阵？
思路:
 1.4如何实现“之”字形打印矩阵？  PrintMatrixZhi.java
思路:定义一个函数,输入两个顶点坐标可以打印一条写线,并且设定一个bolean值(代表斜线的打印方向),每次打印一条斜线之后,
     boolean值发生改变


2.表达式求值问题以及逆波兰表达式


3.给定一个数组,判定数组中的值是否都只出现一次,时间复杂度:O(N)   UniqueChar.java
思路:可以使用hash表,遍历数组判断当前元素在hash中是否存在.如果不存在,则将元素放入hash中,然后遍历下一个;
    如果hash中存在,则返回false,说明数组中元素存在重复的值.
扩展问题:当强行规定空间复杂度O(1),怎样做到时间复杂度尽可能低?
思路:
时间复杂度O(N):桶排序,基数排序
时间复杂度O(NlogN):快排(空间复杂度至少O(logN)),堆排序(可以选择,空间复杂度O(1)),归并排序(空间复杂度O(N)),希尔排序(取决于步长的选择)


*4.根据最长回⽂⼦序列处理字符串  LongestPalindrome.java
    给定⼀个字符串str和它的⼀个最长回⽂⼦序列strLPS，返回字符串str
    在任意位置添加最少字符后，整体都是回⽂串的其中⼀种结果。
    例如： str="AB1C2DE34F3GHJ21KL"; strLPS="1234321";
    返回："ABLK1C2DEJHG3F4F3GHJED2C1KLBA"
思路:若原串长度为n,最长回文子串长度为m,那么最后结果应为2*(n-m)+m=2*n-m
    所以开辟一个长度为2*n-m的数组


5.在一个数组中找到是否有一个数出现次数大于一半,打印该数.
思路:
扩展问题:一个数组中是否有几个数出现了n/k次(n:数组的长度,k一个常数)


*6、字符串旋转问题  StringRotation1.java   StringRotation2.java
给定⼀个字符串str，和⼀个非负的整数i代表str中的位置，包括i位置在内的 左侧部分想移到右边来，i位置右边的位置想移到
左边来，请写函数实现。
例如： str = "ABCDEFGH"; i = 4;
调整结果为："FGHABCDE"
要求：时间复杂度为O(N)，额外空间复杂度为O(1)。